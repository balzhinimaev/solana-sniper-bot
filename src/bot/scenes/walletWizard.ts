// src/bot/scenes/walletWizard.ts
import { Composer, Markup, Scenes } from "telegraf";
import { encrypt } from "../../utils/encryption"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è encrypt
import { MyContext } from "../types/MyContext";
import { WalletModel } from "../../models/Wallet"; // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
import logger from "../../utils/logger";
import { sendOrEditMessage } from "../utils/messages";
// –û–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Wizard-—Å—Ü–µ–Ω—ã
interface WizardState {
    language?: string;
}

export const walletWizard = new Scenes.WizardScene<
    MyContext & { wizard: { state: WizardState } }>(
    "wallet-wizard",
    new Composer<MyContext>(),

    // –®–∞–≥ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async (ctx) => {
        if (ctx.message && "text" in ctx.message) {

            const userInput = ctx.message.text;

            try {
                await ctx.reply(userInput)
            } catch (error) {
                await ctx.reply(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞."
                );
                logger.error(error)
            }

        } else if (ctx.callbackQuery && "data" in ctx.callbackQuery) {
            const action = ctx.callbackQuery.data;
            if (action === "back") {

                greetingWalletWizard(ctx)

            }
            if (action === "main_menu") {
                return ctx.scene.enter("home")
            }
            await ctx.answerCbQuery();
        }
    },
);

// –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å—Ü–µ–Ω—É
walletWizard.enter((ctx) => greetingWalletWizard(ctx));

async function greetingWalletWizard(ctx: MyContext) {
    try {
        const userId = ctx.from?.id;

        if (!userId) {
            await sendOrEditMessage(
                ctx,
                `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`,
                undefined,
                true
            );
            return;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const wallet = await WalletModel.findOne({ userId });

        if (wallet) {
            const walletPreview = `${wallet.encryptedKey.slice(0, 8)}...${wallet.encryptedKey.slice(-8)}`;
            await sendOrEditMessage(
                ctx,
                `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: \n\n<code>${walletPreview}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("–°–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", "change_wallet")],
                    [Markup.button.callback("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "view_wallet_settings")],
                    [Markup.button.callback("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")],
                ])
            );
        } else {
            await sendOrEditMessage(
                ctx,
                `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", "connect_wallet")],
                    [Markup.button.callback("–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")],
                ])
            );
        }

    } catch (error) {
        logger.error("–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –∫–æ—à–µ–ª—å–∫–∞:", error);
        await sendOrEditMessage(
            ctx,
            `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            undefined,
            true
        );
    }
}

walletWizard.action("connect_wallet", async (ctx) => {
    await sendOrEditMessage(
        ctx,
        `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ Seed-—Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:`,
        Markup.inlineKeyboard([
            [Markup.button.callback("–ù–∞–∑–∞–¥", "back")],
        ])
    );
    ctx.answerCbQuery()
    return ctx.wizard.selectStep(1); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É 1
});

walletWizard.action("change_wallet", async (ctx) => {
    await sendOrEditMessage(
        ctx,
        `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–ª–∏ Seed-—Ñ—Ä–∞–∑—É –¥–ª—è —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞:`
    );
    ctx.scene.leave();
});

walletWizard.action("view_wallet_settings", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) {
        await sendOrEditMessage(
            ctx,
            `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`
        );
        return;
    }

    const wallet = await WalletModel.findOne({ userId });
    if (wallet) {
        const settings = wallet.settings;
        await sendOrEditMessage(
            ctx,
            `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n- –ö–æ–º–∏—Å—Å–∏—è: ${settings.transactionFee} SOL\n- –°–ª–∏–ø–∏–¥–∂: ${settings.slippage}%\n- –ë–∏—Ä–∂–∏: ${settings.preferredExchanges.join(", ")}`,
            Markup.inlineKeyboard([
                [Markup.button.callback("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "change_wallet_settings")],
                [Markup.button.callback("–ù–∞–∑–∞–¥", "wallet_scene")],
            ])
        );
    } else {
        await sendOrEditMessage(
            ctx,
            `<b>ü§ñ Solana Sniper Bot</b> <b>/ Wallet</b>\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫.`
        );
    }
    ctx.scene.leave();
});

walletWizard.action("main_menu", async (ctx) => {
    ctx.scene.enter("home");
    ctx.answerCbQuery()
    return
});

